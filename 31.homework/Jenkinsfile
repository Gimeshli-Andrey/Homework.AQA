pipeline {
    agent any

    environment {
        PROJECT_DIR = '31.homework'
        VENV_NAME = 'venv'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Клонирование кода из репозитория..."
                git branch: 'main', url: 'https://github.com/Gimeshli-Andrey/Homework.AQA.git'
            }
        }

        stage('Install dependencies') {
            steps {
                sh '''#!/bin/bash
                    echo "Обновление пакетов и установка зависимостей..."
                    apt-get update
                    apt-get install -y python3 python3-dev python3-pip python3.11-venv
                    rm -rf ${PROJECT_DIR}/venv
                    echo "Создание виртуального окружения..."
                    python3 -m venv ${PROJECT_DIR}/venv
                '''
            }
        }

        stage('Install requirements') {
            steps {
                sh '''#!/bin/bash
                    if [ ! -d "${PROJECT_DIR}/venv" ]; then
                        echo "Ошибка: виртуальное окружение не найдено!"
                        exit 1
                    fi
                    echo "Активируем виртуальное окружение..."
                    source ${PROJECT_DIR}/venv/bin/activate
                    echo "Устанавливаем зависимости из requirements.txt..."
                    pip install --no-cache-dir -r ${PROJECT_DIR}/requirements.txt
                '''
            }
        }

        stage('Run tests') {
            steps {
                dir("${env.PROJECT_DIR}") {
                    sh '''#!/bin/bash
                        source venv/bin/activate
                        pytest -m ${pytest_mark}  --alluredir=allure-results
                    '''
                }
            }

            post {
                always {
                    echo "Публикуем результаты тестов в Jenkins..."
                    junit "${env.PROJECT_DIR}/allure-results/test-results.xml"
                    echo "Публикуем отчет Allure..."
                    allure([
                        includeProperties: false,
                        results: [[path: "${env.PROJECT_DIR}/allure-report"]]
                    ])
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    echo "Попытка генерации отчета Allure..."
                    allure([
                        includeProperties: false,
                        jdk: '',
                        results: [[path: "${env.PROJECT_DIR}/allure-report"]]
                    ])
                } catch (Exception e) {
                    echo "Ошибка генерации Allure-отчета: ${e.getMessage()}"
                }
            }

            echo "Отправка уведомления по электронной почте..."
            emailext (
                subject: "Статус сборки: ${currentBuild.currentResult}",
                body: """
                    <html>
                    <body>
                        <h2>Статус сборки: ${currentBuild.currentResult}</h2>
                        <p><strong>Проект:</strong> ${env.JOB_NAME}</p>
                        <p><strong>Номер сборки:</strong> ${env.BUILD_NUMBER}</p>
                        <p>Подробные результаты доступны: <a href=\"${env.BUILD_URL}\">${env.JOB_NAME}</a></p>
                    </body>
                    </html>
                """,
                to: "InsertYour@Mail.Here",
                mimeType: 'text/html'
            )
        }

        cleanup {
            sh '''#!/bin/bash
                echo "Удаляем виртуальное окружение..."
                rm -rf ${PROJECT_DIR}/venv
                echo "Остановка и удаление всех контейнеров..."
                cd ${PROJECT_DIR}
                docker-compose down || true
            '''
        }
    }
}